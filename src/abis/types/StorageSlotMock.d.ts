/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StorageSlotMockInterface extends ethers.utils.Interface {
  functions: {
    "getAddress(bytes32)": FunctionFragment;
    "getBoolean(bytes32)": FunctionFragment;
    "getBytes32(bytes32)": FunctionFragment;
    "getUint256(bytes32)": FunctionFragment;
    "setAddress(bytes32,address)": FunctionFragment;
    "setBoolean(bytes32,bool)": FunctionFragment;
    "setBytes32(bytes32,bytes32)": FunctionFragment;
    "setUint256(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoolean",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUint256",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBoolean",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBytes32",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUint256",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBoolean", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBytes32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBoolean", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBytes32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUint256", data: BytesLike): Result;

  events: {};
}

export class StorageSlotMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StorageSlotMockInterface;

  functions: {
    getAddress(slot: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getBoolean(slot: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    getBytes32(slot: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getUint256(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAddress(
      slot: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBoolean(
      slot: BytesLike,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBytes32(
      slot: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUint256(
      slot: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAddress(slot: BytesLike, overrides?: CallOverrides): Promise<string>;

  getBoolean(slot: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getBytes32(slot: BytesLike, overrides?: CallOverrides): Promise<string>;

  getUint256(slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  setAddress(
    slot: BytesLike,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBoolean(
    slot: BytesLike,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBytes32(
    slot: BytesLike,
    value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUint256(
    slot: BytesLike,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAddress(slot: BytesLike, overrides?: CallOverrides): Promise<string>;

    getBoolean(slot: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getBytes32(slot: BytesLike, overrides?: CallOverrides): Promise<string>;

    getUint256(slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setAddress(
      slot: BytesLike,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBoolean(
      slot: BytesLike,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBytes32(
      slot: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setUint256(
      slot: BytesLike,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAddress(slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getBoolean(slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getBytes32(slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getUint256(slot: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setAddress(
      slot: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBoolean(
      slot: BytesLike,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBytes32(
      slot: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUint256(
      slot: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddress(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoolean(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBytes32(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUint256(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddress(
      slot: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBoolean(
      slot: BytesLike,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBytes32(
      slot: BytesLike,
      value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUint256(
      slot: BytesLike,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
