/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VestingCrowdSellInterface extends ethers.utils.Interface {
  functions: {
    "CurrentPhase()": FunctionFragment;
    "DoBuy()": FunctionFragment;
    "FundersReleasePRM()": FunctionFragment;
    "FundersReleasePeriod()": FunctionFragment;
    "FundersVault(address)": FunctionFragment;
    "ICORate()": FunctionFragment;
    "PreSellRate()": FunctionFragment;
    "PrivateReleasePRC()": FunctionFragment;
    "PrivateReleasePeriod()": FunctionFragment;
    "PrivateSellRate()": FunctionFragment;
    "PrivateVault(address)": FunctionFragment;
    "SetPayOutLimit(uint256)": FunctionFragment;
    "Start()": FunctionFragment;
    "addModerator(address)": FunctionFragment;
    "buyInICO()": FunctionFragment;
    "buyInPreSell()": FunctionFragment;
    "buyInPrivateSell()": FunctionFragment;
    "changeCrowdsalePhase(uint8)": FunctionFragment;
    "fundersCanWithdrow()": FunctionFragment;
    "fundersDiposit(address,uint256)": FunctionFragment;
    "fundersVastingTotalBalance()": FunctionFragment;
    "fundersWithdrawTokens()": FunctionFragment;
    "getAvailablePayOut()": FunctionFragment;
    "getFundersReleasablePRC()": FunctionFragment;
    "getNbDaysSinceStarted()": FunctionFragment;
    "getPrivateReleasablePRC()": FunctionFragment;
    "getToken()": FunctionFragment;
    "isModerator()": FunctionFragment;
    "maxICO()": FunctionFragment;
    "maxPrivate()": FunctionFragment;
    "maxpre()": FunctionFragment;
    "open()": FunctionFragment;
    "owner()": FunctionFragment;
    "privateCanWithdrow()": FunctionFragment;
    "privateVastingTotalBalance()": FunctionFragment;
    "privateWithdrawTokens()": FunctionFragment;
    "removeModerator(address)": FunctionFragment;
    "removeWhiteListedBuyer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendPayout(address,uint256)": FunctionFragment;
    "setRate(uint8,uint256)": FunctionFragment;
    "startDate()": FunctionFragment;
    "stillCanBuy()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "weiRaisedInICO()": FunctionFragment;
    "weiRaisedInPreSell()": FunctionFragment;
    "weiRaisedInPrivateSell()": FunctionFragment;
    "whiteListPrivateBuyer(address,uint256)": FunctionFragment;
    "whiteListed()": FunctionFragment;
    "withdrow(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CurrentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DoBuy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FundersReleasePRM",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FundersReleasePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FundersVault",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "ICORate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PreSellRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PrivateReleasePRC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PrivateReleasePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PrivateSellRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PrivateVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "SetPayOutLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addModerator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "buyInICO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyInPreSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyInPrivateSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeCrowdsalePhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundersCanWithdrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundersDiposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundersVastingTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundersWithdrawTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailablePayOut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundersReleasablePRC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNbDaysSinceStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrivateReleasablePRC",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isModerator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxICO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxPrivate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxpre", values?: undefined): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "privateCanWithdrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privateVastingTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privateWithdrawTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeModerator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhiteListedBuyer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendPayout",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stillCanBuy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "weiRaisedInICO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weiRaisedInPreSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weiRaisedInPrivateSell",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListPrivateBuyer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrow",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CurrentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DoBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FundersReleasePRM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FundersReleasePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FundersVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ICORate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PreSellRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PrivateReleasePRC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PrivateReleasePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PrivateSellRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PrivateVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetPayOutLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyInICO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyInPreSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyInPrivateSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCrowdsalePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundersCanWithdrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundersDiposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundersVastingTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundersWithdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailablePayOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundersReleasablePRC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNbDaysSinceStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrivateReleasablePRC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxICO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPrivate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxpre", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "privateCanWithdrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateVastingTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateWithdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhiteListedBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stillCanBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weiRaisedInICO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weiRaisedInPreSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weiRaisedInPrivateSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListPrivateBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrow", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PayOuts(address,uint256)": EventFragment;
    "TokensPurchased(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayOuts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensPurchased"): EventFragment;
}

export class VestingCrowdSell extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VestingCrowdSellInterface;

  functions: {
    CurrentPhase(overrides?: CallOverrides): Promise<[number]>;

    DoBuy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    FundersReleasePRM(overrides?: CallOverrides): Promise<[BigNumber]>;

    FundersReleasePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    FundersVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalBalance: BigNumber;
        claimedBalance: BigNumber;
      }
    >;

    ICORate(overrides?: CallOverrides): Promise<[BigNumber]>;

    PreSellRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    PrivateReleasePRC(overrides?: CallOverrides): Promise<[BigNumber]>;

    PrivateReleasePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    PrivateSellRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    PrivateVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalBalance: BigNumber;
        claimedBalance: BigNumber;
      }
    >;

    SetPayOutLimit(
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addModerator(
      moderatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyInICO(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyInPreSell(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyInPrivateSell(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeCrowdsalePhase(
      _phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundersCanWithdrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundersDiposit(
      beneficiary: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundersVastingTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundersWithdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAvailablePayOut(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFundersReleasablePRC(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNbDaysSinceStarted(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrivateReleasablePRC(overrides?: CallOverrides): Promise<[BigNumber]>;

    getToken(overrides?: CallOverrides): Promise<[string]>;

    isModerator(overrides?: CallOverrides): Promise<[boolean]>;

    maxICO(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPrivate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxpre(overrides?: CallOverrides): Promise<[BigNumber]>;

    open(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    privateCanWithdrow(overrides?: CallOverrides): Promise<[BigNumber]>;

    privateVastingTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    privateWithdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModerator(
      moderatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWhiteListedBuyer(
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendPayout(
      recipient: string,
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRate(
      _phase: BigNumberish,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    stillCanBuy(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weiRaisedInICO(overrides?: CallOverrides): Promise<[BigNumber]>;

    weiRaisedInPreSell(overrides?: CallOverrides): Promise<[BigNumber]>;

    weiRaisedInPrivateSell(overrides?: CallOverrides): Promise<[BigNumber]>;

    whiteListPrivateBuyer(
      _buyer: string,
      _weiToBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListed(overrides?: CallOverrides): Promise<[boolean]>;

    withdrow(
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CurrentPhase(overrides?: CallOverrides): Promise<number>;

  DoBuy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  FundersReleasePRM(overrides?: CallOverrides): Promise<BigNumber>;

  FundersReleasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  FundersVault(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalBalance: BigNumber;
      claimedBalance: BigNumber;
    }
  >;

  ICORate(overrides?: CallOverrides): Promise<BigNumber>;

  PreSellRate(overrides?: CallOverrides): Promise<BigNumber>;

  PrivateReleasePRC(overrides?: CallOverrides): Promise<BigNumber>;

  PrivateReleasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  PrivateSellRate(overrides?: CallOverrides): Promise<BigNumber>;

  PrivateVault(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalBalance: BigNumber;
      claimedBalance: BigNumber;
    }
  >;

  SetPayOutLimit(
    weiAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Start(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addModerator(
    moderatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyInICO(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyInPreSell(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyInPrivateSell(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeCrowdsalePhase(
    _phase: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundersCanWithdrow(overrides?: CallOverrides): Promise<BigNumber>;

  fundersDiposit(
    beneficiary: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundersVastingTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  fundersWithdrawTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAvailablePayOut(overrides?: CallOverrides): Promise<BigNumber>;

  getFundersReleasablePRC(overrides?: CallOverrides): Promise<BigNumber>;

  getNbDaysSinceStarted(overrides?: CallOverrides): Promise<BigNumber>;

  getPrivateReleasablePRC(overrides?: CallOverrides): Promise<BigNumber>;

  getToken(overrides?: CallOverrides): Promise<string>;

  isModerator(overrides?: CallOverrides): Promise<boolean>;

  maxICO(overrides?: CallOverrides): Promise<BigNumber>;

  maxPrivate(overrides?: CallOverrides): Promise<BigNumber>;

  maxpre(overrides?: CallOverrides): Promise<BigNumber>;

  open(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  privateCanWithdrow(overrides?: CallOverrides): Promise<BigNumber>;

  privateVastingTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  privateWithdrawTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModerator(
    moderatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWhiteListedBuyer(
    _buyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendPayout(
    recipient: string,
    weiAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRate(
    _phase: BigNumberish,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  stillCanBuy(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weiRaisedInICO(overrides?: CallOverrides): Promise<BigNumber>;

  weiRaisedInPreSell(overrides?: CallOverrides): Promise<BigNumber>;

  weiRaisedInPrivateSell(overrides?: CallOverrides): Promise<BigNumber>;

  whiteListPrivateBuyer(
    _buyer: string,
    _weiToBuy: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListed(overrides?: CallOverrides): Promise<boolean>;

  withdrow(
    weiAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CurrentPhase(overrides?: CallOverrides): Promise<number>;

    DoBuy(overrides?: CallOverrides): Promise<void>;

    FundersReleasePRM(overrides?: CallOverrides): Promise<BigNumber>;

    FundersReleasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    FundersVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalBalance: BigNumber;
        claimedBalance: BigNumber;
      }
    >;

    ICORate(overrides?: CallOverrides): Promise<BigNumber>;

    PreSellRate(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateReleasePRC(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateReleasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateSellRate(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalBalance: BigNumber;
        claimedBalance: BigNumber;
      }
    >;

    SetPayOutLimit(
      weiAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    Start(overrides?: CallOverrides): Promise<void>;

    addModerator(
      moderatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyInICO(overrides?: CallOverrides): Promise<void>;

    buyInPreSell(overrides?: CallOverrides): Promise<void>;

    buyInPrivateSell(overrides?: CallOverrides): Promise<void>;

    changeCrowdsalePhase(
      _phase: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundersCanWithdrow(overrides?: CallOverrides): Promise<BigNumber>;

    fundersDiposit(
      beneficiary: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundersVastingTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    fundersWithdrawTokens(overrides?: CallOverrides): Promise<void>;

    getAvailablePayOut(overrides?: CallOverrides): Promise<BigNumber>;

    getFundersReleasablePRC(overrides?: CallOverrides): Promise<BigNumber>;

    getNbDaysSinceStarted(overrides?: CallOverrides): Promise<BigNumber>;

    getPrivateReleasablePRC(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<string>;

    isModerator(overrides?: CallOverrides): Promise<boolean>;

    maxICO(overrides?: CallOverrides): Promise<BigNumber>;

    maxPrivate(overrides?: CallOverrides): Promise<BigNumber>;

    maxpre(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    privateCanWithdrow(overrides?: CallOverrides): Promise<BigNumber>;

    privateVastingTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    privateWithdrawTokens(overrides?: CallOverrides): Promise<void>;

    removeModerator(
      moderatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhiteListedBuyer(
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendPayout(
      recipient: string,
      weiAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRate(
      _phase: BigNumberish,
      _rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    stillCanBuy(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weiRaisedInICO(overrides?: CallOverrides): Promise<BigNumber>;

    weiRaisedInPreSell(overrides?: CallOverrides): Promise<BigNumber>;

    weiRaisedInPrivateSell(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListPrivateBuyer(
      _buyer: string,
      _weiToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteListed(overrides?: CallOverrides): Promise<boolean>;

    withdrow(weiAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    PayOuts(
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    TokensPurchased(
      purchaser?: string | null,
      beneficiary?: string | null,
      value?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        purchaser: string;
        beneficiary: string;
        value: BigNumber;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    CurrentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    DoBuy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    FundersReleasePRM(overrides?: CallOverrides): Promise<BigNumber>;

    FundersReleasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    FundersVault(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ICORate(overrides?: CallOverrides): Promise<BigNumber>;

    PreSellRate(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateReleasePRC(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateReleasePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateSellRate(overrides?: CallOverrides): Promise<BigNumber>;

    PrivateVault(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    SetPayOutLimit(
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addModerator(
      moderatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyInICO(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyInPreSell(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyInPrivateSell(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeCrowdsalePhase(
      _phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundersCanWithdrow(overrides?: CallOverrides): Promise<BigNumber>;

    fundersDiposit(
      beneficiary: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundersVastingTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    fundersWithdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAvailablePayOut(overrides?: CallOverrides): Promise<BigNumber>;

    getFundersReleasablePRC(overrides?: CallOverrides): Promise<BigNumber>;

    getNbDaysSinceStarted(overrides?: CallOverrides): Promise<BigNumber>;

    getPrivateReleasablePRC(overrides?: CallOverrides): Promise<BigNumber>;

    getToken(overrides?: CallOverrides): Promise<BigNumber>;

    isModerator(overrides?: CallOverrides): Promise<BigNumber>;

    maxICO(overrides?: CallOverrides): Promise<BigNumber>;

    maxPrivate(overrides?: CallOverrides): Promise<BigNumber>;

    maxpre(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    privateCanWithdrow(overrides?: CallOverrides): Promise<BigNumber>;

    privateVastingTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    privateWithdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModerator(
      moderatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWhiteListedBuyer(
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendPayout(
      recipient: string,
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRate(
      _phase: BigNumberish,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    stillCanBuy(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weiRaisedInICO(overrides?: CallOverrides): Promise<BigNumber>;

    weiRaisedInPreSell(overrides?: CallOverrides): Promise<BigNumber>;

    weiRaisedInPrivateSell(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListPrivateBuyer(
      _buyer: string,
      _weiToBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListed(overrides?: CallOverrides): Promise<BigNumber>;

    withdrow(
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CurrentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DoBuy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    FundersReleasePRM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FundersReleasePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FundersVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ICORate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PreSellRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PrivateReleasePRC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PrivateReleasePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PrivateSellRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PrivateVault(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SetPayOutLimit(
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Start(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addModerator(
      moderatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyInICO(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyInPreSell(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyInPrivateSell(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeCrowdsalePhase(
      _phase: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundersCanWithdrow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundersDiposit(
      beneficiary: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundersVastingTotalBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundersWithdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAvailablePayOut(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundersReleasablePRC(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNbDaysSinceStarted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrivateReleasablePRC(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isModerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxICO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPrivate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxpre(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    privateCanWithdrow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateVastingTotalBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    privateWithdrawTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModerator(
      moderatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWhiteListedBuyer(
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendPayout(
      recipient: string,
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRate(
      _phase: BigNumberish,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stillCanBuy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weiRaisedInICO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weiRaisedInPreSell(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weiRaisedInPrivateSell(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whiteListPrivateBuyer(
      _buyer: string,
      _weiToBuy: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrow(
      weiAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
