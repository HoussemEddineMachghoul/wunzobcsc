/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20CappedMock,
  ERC20CappedMockInterface,
} from "../ERC20CappedMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "cap",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001ace38038062001ace8339818101604052810190620000379190620001ff565b808383816003908051906020019062000052929190620000c6565b5080600490805190602001906200006b929190620000c6565b50505060008111620000b4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ab90620002c9565b60405180910390fd5b80608081815250505050505062000451565b828054620000d490620003a3565b90600052602060002090601f016020900481019282620000f8576000855562000144565b82601f106200011357805160ff191683800117855562000144565b8280016001018555821562000144579182015b828111156200014357825182559160200191906001019062000126565b5b50905062000153919062000157565b5090565b5b808211156200017257600081600090555060010162000158565b5090565b60006200018d62000187846200031f565b620002eb565b905082815260208101848484011115620001a657600080fd5b620001b38482856200036d565b509392505050565b600082601f830112620001cd57600080fd5b8151620001df84826020860162000176565b91505092915050565b600081519050620001f98162000437565b92915050565b6000806000606084860312156200021557600080fd5b600084015167ffffffffffffffff8111156200023057600080fd5b6200023e86828701620001bb565b935050602084015167ffffffffffffffff8111156200025c57600080fd5b6200026a86828701620001bb565b92505060406200027d86828701620001e8565b9150509250925092565b60006200029660158362000352565b91507f45524332304361707065643a20636170206973203000000000000000000000006000830152602082019050919050565b60006020820190508181036000830152620002e48162000287565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171562000315576200031462000408565b5b8060405250919050565b600067ffffffffffffffff8211156200033d576200033c62000408565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b6000819050919050565b60005b838110156200038d57808201518184015260208101905062000370565b838111156200039d576000848401525b50505050565b60006002820490506001821680620003bc57607f821691505b60208210811415620003d357620003d2620003d9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004428162000363565b81146200044e57600080fd5b50565b6080516116616200046d600039600061049501526116616000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063395093511161008c57806395d89b411161006657806395d89b4114610228578063a457c2d714610246578063a9059cbb14610276578063dd62ed3e146102a6576100cf565b806339509351146101ac57806340c10f19146101dc57806370a08231146101f8576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063355274ea1461018e575b600080fd5b6100dc6102d6565b6040516100e991906112ea565b60405180910390f35b61010c60048036038101906101079190610ee3565b610368565b60405161011991906112cf565b60405180910390f35b61012a610386565b604051610137919061142c565b60405180910390f35b61015a60048036038101906101559190610e94565b610390565b60405161016791906112cf565b60405180910390f35b610178610488565b6040516101859190611447565b60405180910390f35b610196610491565b6040516101a3919061142c565b60405180910390f35b6101c660048036038101906101c19190610ee3565b6104b9565b6040516101d391906112cf565b60405180910390f35b6101f660048036038101906101f19190610ee3565b610565565b005b610212600480360381019061020d9190610e2f565b610573565b60405161021f919061142c565b60405180910390f35b6102306105bb565b60405161023d91906112ea565b60405180910390f35b610260600480360381019061025b9190610ee3565b61064d565b60405161026d91906112cf565b60405180910390f35b610290600480360381019061028b9190610ee3565b610738565b60405161029d91906112cf565b60405180910390f35b6102c060048036038101906102bb9190610e58565b610756565b6040516102cd919061142c565b60405180910390f35b6060600380546102e59061155c565b80601f01602080910402602001604051908101604052809291908181526020018280546103119061155c565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b5050505050905090565b600061037c6103756107dd565b84846107e5565b6001905092915050565b6000600254905090565b600061039d8484846109b0565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103e86107dd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045f9061136c565b60405180910390fd5b61047c856104746107dd565b8584036107e5565b60019150509392505050565b60006012905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600061055b6104c66107dd565b8484600160006104d46107dd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610556919061147e565b6107e5565b6001905092915050565b61056f8282610c31565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546105ca9061155c565b80601f01602080910402602001604051908101604052809291908181526020018280546105f69061155c565b80156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b5050505050905090565b6000806001600061065c6107dd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610719576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610710906113ec565b60405180910390fd5b61072d6107246107dd565b858584036107e5565b600191505092915050565b600061074c6107456107dd565b84846109b0565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c906113cc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bc9061132c565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109a3919061142c565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a179061138c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a879061130c565b60405180910390fd5b610a9b838383610c9b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b189061134c565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bb4919061147e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c18919061142c565b60405180910390a3610c2b848484610ca0565b50505050565b610c39610491565b81610c42610386565b610c4c919061147e565b1115610c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c84906113ac565b60405180910390fd5b610c978282610ca5565b5050565b505050565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0c9061140c565b60405180910390fd5b610d2160008383610c9b565b8060026000828254610d33919061147e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d88919061147e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ded919061142c565b60405180910390a3610e0160008383610ca0565b5050565b600081359050610e14816115fd565b92915050565b600081359050610e2981611614565b92915050565b600060208284031215610e4157600080fd5b6000610e4f84828501610e05565b91505092915050565b60008060408385031215610e6b57600080fd5b6000610e7985828601610e05565b9250506020610e8a85828601610e05565b9150509250929050565b600080600060608486031215610ea957600080fd5b6000610eb786828701610e05565b9350506020610ec886828701610e05565b9250506040610ed986828701610e1a565b9150509250925092565b60008060408385031215610ef657600080fd5b6000610f0485828601610e05565b9250506020610f1585828601610e1a565b9150509250929050565b610f28816114e6565b82525050565b6000610f3982611462565b610f43818561146d565b9350610f53818560208601611529565b610f5c816115ec565b840191505092915050565b6000610f7460238361146d565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610fda60228361146d565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061104060268361146d565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006110a660288361146d565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206160008301527f6c6c6f77616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b600061110c60258361146d565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061117260198361146d565b91507f45524332304361707065643a20636170206578636565646564000000000000006000830152602082019050919050565b60006111b260248361146d565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061121860258361146d565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061127e601f8361146d565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b6112ba81611512565b82525050565b6112c98161151c565b82525050565b60006020820190506112e46000830184610f1f565b92915050565b600060208201905081810360008301526113048184610f2e565b905092915050565b6000602082019050818103600083015261132581610f67565b9050919050565b6000602082019050818103600083015261134581610fcd565b9050919050565b6000602082019050818103600083015261136581611033565b9050919050565b6000602082019050818103600083015261138581611099565b9050919050565b600060208201905081810360008301526113a5816110ff565b9050919050565b600060208201905081810360008301526113c581611165565b9050919050565b600060208201905081810360008301526113e5816111a5565b9050919050565b600060208201905081810360008301526114058161120b565b9050919050565b6000602082019050818103600083015261142581611271565b9050919050565b600060208201905061144160008301846112b1565b92915050565b600060208201905061145c60008301846112c0565b92915050565b600081519050919050565b600082825260208201905092915050565b600061148982611512565b915061149483611512565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114c9576114c861158e565b5b828201905092915050565b60006114df826114f2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561154757808201518184015260208101905061152c565b83811115611556576000848401525b50505050565b6000600282049050600182168061157457607f821691505b60208210811415611588576115876115bd565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b611606816114d4565b811461161157600080fd5b50565b61161d81611512565b811461162857600080fd5b5056fea264697066735822122069b02caf5fa04df4a4e02ae2f59cee1fa469b380452d4a7c5f678c552e05b8da64736f6c63430008000033";

export class ERC20CappedMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    name: string,
    symbol: string,
    cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20CappedMock> {
    return super.deploy(
      name,
      symbol,
      cap,
      overrides || {}
    ) as Promise<ERC20CappedMock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    cap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, cap, overrides || {});
  }
  attach(address: string): ERC20CappedMock {
    return super.attach(address) as ERC20CappedMock;
  }
  connect(signer: Signer): ERC20CappedMock__factory {
    return super.connect(signer) as ERC20CappedMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20CappedMockInterface {
    return new utils.Interface(_abi) as ERC20CappedMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20CappedMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20CappedMock;
  }
}
