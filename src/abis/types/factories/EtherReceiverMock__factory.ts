/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EtherReceiverMock,
  EtherReceiverMockInterface,
} from "../EtherReceiverMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "acceptEther",
        type: "bool",
      },
    ],
    name: "setAcceptEther",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061010f806100206000396000f3fe608060405260043610601f5760003560e01c80634fea120c14604057603b565b36603b5760008054906101000a900460ff16603957600080fd5b005b600080fd5b348015604b57600080fd5b5060626004803603810190605e91906093565b6064565b005b806000806101000a81548160ff02191690831515021790555050565b600081359050608d8160c5565b92915050565b60006020828403121560a457600080fd5b600060b0848285016080565b91505092915050565b60008115159050919050565b60cc8160b9565b811460d657600080fd5b5056fea2646970667358221220b018dca808cdb3c2eab31e99f11a1a2f51b4fe0c4b1c30596044ab470acdf9f364736f6c63430008000033";

export class EtherReceiverMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EtherReceiverMock> {
    return super.deploy(overrides || {}) as Promise<EtherReceiverMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EtherReceiverMock {
    return super.attach(address) as EtherReceiverMock;
  }
  connect(signer: Signer): EtherReceiverMock__factory {
    return super.connect(signer) as EtherReceiverMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EtherReceiverMockInterface {
    return new utils.Interface(_abi) as EtherReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EtherReceiverMock {
    return new Contract(address, _abi, signerOrProvider) as EtherReceiverMock;
  }
}
